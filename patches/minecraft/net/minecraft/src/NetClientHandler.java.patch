--- ../src_base/minecraft/net/minecraft/src/NetClientHandler.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft/net/minecraft/src/NetClientHandler.java	0000-00-00 00:00:00.000000000 -0000
@@ -54,7 +54,6 @@
         this.mc = par1Minecraft;
         Socket var4 = new Socket(InetAddress.getByName(par2Str), par3);
         this.netManager = new NetworkManager(var4, "Client", this);
-        
         ForgeHooks.onConnect(netManager);
     }
 
@@ -83,30 +82,31 @@
         this.mc.thePlayer.entityId = par1Packet1Login.protocolVersion;
         this.currentServerMaxPlayers = par1Packet1Login.maxPlayers;
         ((PlayerControllerMP)this.mc.playerController).setCreative(par1Packet1Login.serverMode == 1);
-        
         ForgeHooks.onLogin(netManager, par1Packet1Login);
-        
         String[] channels = MessageManager.getInstance().getRegisteredChannels(netManager);
         StringBuilder tmp = new StringBuilder();
         tmp.append("Forge");
-        for(String channel : channels)
+
+        for (String channel : channels)
         {
             tmp.append("\0");
             tmp.append(channel);
         }
-        Packet250CustomPayload pkt = new Packet250CustomPayload(); 
+
+        Packet250CustomPayload pkt = new Packet250CustomPayload();
         pkt.channel = "REGISTER";
-        try 
+
+        try
         {
             pkt.data = tmp.toString().getBytes("UTF8");
-        } 
-        catch (UnsupportedEncodingException e) 
+        }
+        catch (UnsupportedEncodingException e)
         {
             e.printStackTrace();
         }
+
         pkt.length = pkt.data.length;
         addToSendQueue(pkt);
-        
         ModLoader.serverConnect(this, par1Packet1Login);
     }
 
@@ -212,8 +212,8 @@
         {
             var8 = new EntityFallingSand(this.worldClient, var2, var4, var6, Block.dragonEgg.blockID);
         }
-        
-        try 
+
+        try
         {
             var8 = ModCompatibilityClient.mlmpVehicleSpawn(par1Packet23VehicleSpawn.type,
                     worldClient, var2, var4, var6,
@@ -593,6 +593,7 @@
     public void handleChat(Packet3Chat par1Packet3Chat)
     {
         par1Packet3Chat.message = ForgeHooks.onClientChatRecv(par1Packet3Chat.message);
+
         if (par1Packet3Chat.message != null)
         {
             this.mc.ingameGUI.addChatMessage(par1Packet3Chat.message);
@@ -687,9 +688,9 @@
             /**
              * We use some of the unused fields in Packet 001 Login to identify the user as having Forge installed.
              * This allows modded clients to connect to Vanilla server without crashing.
-             * It also allows unmodded clients to connect to Forge server without crashing. 
+             * It also allows unmodded clients to connect to Forge server without crashing.
              * Its a bit of a dirty hack, but it doesnt interrupt the login flow, and its unused data.
-             * The C->S serverMode is set to the hash code of the string "Forge", this should provide a fairly unique 
+             * The C->S serverMode is set to the hash code of the string "Forge", this should provide a fairly unique
              * identifier so we are certain it is not random, and it is Forge installed.
              * The C->S dimension is set to the current Forge build number, in case we need to do any quick version checks.
              */
@@ -712,9 +713,9 @@
                     /**
                      * We use some of the unused fields in Packet 001 Login to identify the user as having Forge installed.
                      * This allows modded clients to connect to Vanilla server without crashing.
-                     * It also allows unmodded clients to connect to Forge server without crashing. 
+                     * It also allows unmodded clients to connect to Forge server without crashing.
                      * Its a bit of a dirty hack, but it doesnt interrupt the login flow, and its unused data.
-                     * The C->S serverMode is set to the hash code of the string "Forge", this should provide a fairly unique 
+                     * The C->S serverMode is set to the hash code of the string "Forge", this should provide a fairly unique
                      * identifier so we are certain it is not random, and it is Forge installed.
                      * The C->S dimension is set to the current Forge build number, in case we need to do any quick version checks.
                      */
@@ -909,7 +910,7 @@
                 var2.displayGUIBrewingStand(new TileEntityBrewingStand());
                 var2.craftingInventory.windowId = par1Packet100OpenWindow.windowId;
                 break;
-            
+
             default:
                 ModCompatibilityClient.mlmpOpenWindow(par1Packet100OpenWindow);
         }
@@ -1022,13 +1023,13 @@
             {
                 var2.onDataPacket(netManager,  par1Packet132TileEntityData);
             }
-            else 
+            else
             {
                 Packet132TileEntityData pkt = par1Packet132TileEntityData;
                 ModLoader.getLogger().log(Level.WARNING, String.format(
-                        "Received a TileEntityData packet for a location that did not have a TileEntity: (%d, %d, %d) %d: %d, %d, %d", 
+                        "Received a TileEntityData packet for a location that did not have a TileEntity: (%d, %d, %d) %d: %d, %d, %d",
                         pkt.xPosition, pkt.yPosition, pkt.zPosition,
-                        pkt.actionType, 
+                        pkt.actionType,
                         pkt.customParam1, pkt.customParam2, pkt.customParam3));
             }
         }
@@ -1211,37 +1212,40 @@
     {
         ModLoader.receivePacket(var1);
         MessageManager inst = MessageManager.getInstance();
-        if (var1.channel.equals("REGISTER")) 
+
+        if (var1.channel.equals("REGISTER"))
         {
-            try 
+            try
             {
                 String channels = new String(var1.data, "UTF8");
-                for (String channel : channels.split("\0")) 
+
+                for (String channel : channels.split("\0"))
                 {
                     inst.addActiveChannel(netManager, channel);
                 }
-            } 
-            catch (UnsupportedEncodingException ex) 
+            }
+            catch (UnsupportedEncodingException ex)
             {
                 ModLoader.throwException("NetClientHandler.handleCustomPayload", ex);
             }
-        } 
-        else if (var1.channel.equals("UNREGISTER")) 
+        }
+        else if (var1.channel.equals("UNREGISTER"))
         {
-            try 
+            try
             {
                 String channels = new String(var1.data, "UTF8");
-                for (String channel : channels.split("\0")) 
+
+                for (String channel : channels.split("\0"))
                 {
                     inst.removeActiveChannel(netManager, channel);
                 }
             }
-            catch (UnsupportedEncodingException ex) 
+            catch (UnsupportedEncodingException ex)
             {
                 ModLoader.throwException("NetClientHandler.handleCustomPayload", ex);
             }
-        } 
-        else 
+        }
+        else
         {
             inst.dispatchIncomingMessage(netManager, var1.channel, var1.data);
         }
