--- ../src_base/minecraft/net/minecraft/src/forge/ModCompatibilityClient.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft/net/minecraft/src/forge/ModCompatibilityClient.java	0000-00-00 00:00:00.000000000 -0000
@@ -9,19 +9,19 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.src.*;
 
-public class ModCompatibilityClient 
+public class ModCompatibilityClient
 {
     /**
-     * Trys to get the class for the specified name, will also try the 
+     * Trys to get the class for the specified name, will also try the
      * net.minecraft.src package in case we are in MCP
      * Returns null if not found.
-     * 
+     *
      * @param name The class name
      * @return The Class, or null if not found
      */
     private static Class getClass(String name)
     {
-        try 
+        try
         {
             return Class.forName(name);
         }
@@ -37,23 +37,23 @@
             }
         }
     }
-    
+
     /************************************************************************************************
      * Risugami's AudioMod Compatibility
      * http://www.minecraftforum.net/topic/75440-
-     * 
+     *
      * AudioMod adds a few extra codecs, loads audio from /resources/mods/*,
-     * introduces the concept of 'cave' sounds, which are determined by if 
+     * introduces the concept of 'cave' sounds, which are determined by if
      * the player is underneath a solid block.
-     * 
+     *
      * It also lowers the interval between background music songs to 6000
      */
     public static SoundPool audioModSoundPoolCave;
-    private static int isAudioModInstalled = -1; 
+    private static int isAudioModInstalled = -1;
 
     /**
      * Determine if AudioMod is installed by checking for the existence of IBMX Codec,
-     * I wish there was a less ambiguous way, but there isn't. 
+     * I wish there was a less ambiguous way, but there isn't.
      * @return True if the IBMX codec was found (indicating AudioMod is installed)
      */
     public static boolean isAudioModInstalled()
@@ -62,13 +62,14 @@
         {
             isAudioModInstalled = (getClass("paulscode.sound.codecs.CodecIBXM") != null ? 1 : 0);
         }
+
         return isAudioModInstalled == 1;
     }
-    
+
     /**
      * Populates the sound pools with with sounds from the /resources/mods folder
      * And sets the interval between background music to 6000
-     * 
+     *
      * @param mngr The SoundManager instance
      */
     public static void audioModLoad(SoundManager mngr)
@@ -77,18 +78,19 @@
         {
             return;
         }
+
         audioModSoundPoolCave = new SoundPool();
         audioModLoadModAudio("minecraft/resources/mod/sound", mngr.getSoundsPool());
         audioModLoadModAudio("minecraft/resources/mod/streaming", mngr.getStreamingPool());
         audioModLoadModAudio("minecraft/resources/mod/music", mngr.getMusicPool());
         audioModLoadModAudio("minecraft/resources/mod/cavemusic", audioModSoundPoolCave);
-        
+
         if (mngr.MUSIC_INTERVAL == 12000)
         {
             mngr.MUSIC_INTERVAL = 6000;
         }
     }
-    
+
     /**
      * Walks the given path in the Minecraft app directory and adds audio to the SoundPool
      * @param path The path to walk
@@ -109,10 +111,10 @@
             ex.printStackTrace();
         }
     }
-    
+
     /**
      * Walks the folder path recursively and calls pool.addSound on any file it finds.
-     * 
+     *
      * @param base The base path for the folder, determines the name when calling addSound
      * @param folder The current folder
      * @param pool The SoundPool to add the sound to
@@ -123,7 +125,7 @@
         if (folder.exists() || folder.mkdirs())
         {
             for (File file : folder.listFiles())
-            {             
+            {
                 if (!file.getName().startsWith("."))
                 {
                     if (file.isDirectory())
@@ -143,9 +145,10 @@
     /**
      * Adds the IBXM codec and associates it with .xm, .s3m, and .mod
      */
-    public static void audioModAddCodecs() 
+    public static void audioModAddCodecs()
     {
         Class codec = getClass("paulscode.sound.codecs.CodecIBXM");
+
         if (isAudioModInstalled() && codec != null)
         {
             SoundSystemConfig.setCodec("xm", codec);
@@ -157,14 +160,15 @@
     /**
      * If the current player is underground, it picks a random song from the cave sound pool,
      * if they are not it returns the passed in entry.
-     * 
+     *
      * @param soundManager The SoundManager instance
      * @param current The currently selected entry
      * @return A soundPool entry to be played as the background music
      */
-    public static SoundPoolEntry audioModPickBackgroundMusic(SoundManager soundManager, SoundPoolEntry current) 
+    public static SoundPoolEntry audioModPickBackgroundMusic(SoundManager soundManager, SoundPoolEntry current)
     {
         Minecraft mc = ModLoader.getMinecraftInstance();
+
         if (isAudioModInstalled() && mc != null && mc.theWorld != null && audioModSoundPoolCave != null)
         {
             Entity ent = mc.renderViewEntity;
@@ -173,21 +177,22 @@
             int z = MathHelper.func_40346_b(ent.posZ);
             return (mc.theWorld.canBlockSeeTheSky(x, y, z) ? current : audioModSoundPoolCave.getRandomSound());
         }
+
         return current;
     }
-    
+
     /***********************************************************************************************************
      * SDK's ModLoaderMP
      * http://www.minecraftforum.net/topic/86765-
-     * 
-     * ModLoaderMP was supposed to be a reliable server side version of ModLoader, however it has 
+     *
+     * ModLoaderMP was supposed to be a reliable server side version of ModLoader, however it has
      * gotten the reputation of being really slow to update. Never having bugfixes, breaking compatibility
      * with the client side ModLoader.
-     * 
+     *
      * So we have replaced it with our own system called FML (Forge ModLoader)
      * it is a stand alone mod, that Forge relies on, and that is open source/community driven.
      * https://github.com/cpw/FML
-     * 
+     *
      * However, for compatibilities sake, we provide the ModLoaderMP's hooks so that the end user
      * does not need to make a choice between the two on the client side.
      **/
@@ -203,13 +208,14 @@
         {
             isMLMPInstalled = (getClass("ModLoaderMp") != null ? 1 : 0);
         }
+
         return isMLMPInstalled == 1;
     }
 
     /**
-     * Attempts to spawn a vehicle using ModLoaderMP's vehicle spawn registry, if MLMP is not installed 
+     * Attempts to spawn a vehicle using ModLoaderMP's vehicle spawn registry, if MLMP is not installed
      * it returns the passed in currentEntity
-     * 
+     *
      * @param type The Type ID of the vehicle
      * @param world The current world
      * @param x The spawn X position
@@ -222,18 +228,20 @@
      */
     public static Object mlmpVehicleSpawn(int type, World world, double x, double y, double z, Entity thrower, Object currentEntity) throws Exception
     {
-        Class mlmp = getClass("ModLoaderMp"); 
+        Class mlmp = getClass("ModLoaderMp");
+
         if (!isMLMPInstalled() || mlmp == null)
         {
             return currentEntity;
         }
-        
+
         Object entry = mlmp.getDeclaredMethod("handleNetClientHandlerEntities", int.class).invoke(null, type);
+
         if (entry == null)
         {
             return currentEntity;
         }
-        
+
         Class entityClass = (Class)entry.getClass().getDeclaredField("entityClass").get(entry);
         Object ret = (Entity)entityClass.getConstructor(World.class, Double.TYPE, Double.TYPE, Double.TYPE).newInstance(world, x, y, z);
 
@@ -261,28 +269,30 @@
                 owner.set(ret, thrower);
             }
         }
+
         return ret;
     }
-    
+
     /**
      * Attempts to invoke ModLoaderMp.handleGUI if ModLoaderMP is installed.
      * If not, it does nothing
-     * 
+     *
      * @param pkt The open window packet
      */
-    public static void mlmpOpenWindow(Packet100OpenWindow pkt) 
+    public static void mlmpOpenWindow(Packet100OpenWindow pkt)
     {
-        Class mlmp = getClass("ModLoaderMp"); 
+        Class mlmp = getClass("ModLoaderMp");
+
         if (!isMLMPInstalled() || mlmp == null)
         {
             return;
         }
-        
-        try 
+
+        try
         {
             mlmp.getDeclaredMethod("handleGUI", Packet100OpenWindow.class).invoke(null, pkt);
-        } 
-        catch (Exception e) 
+        }
+        catch (Exception e)
         {
             e.printStackTrace();
         }
