--- ../src_base/minecraft/net/minecraft/src/forge/ArmorProperties.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft/net/minecraft/src/forge/ArmorProperties.java	0000-00-00 00:00:00.000000000 -0000
@@ -21,7 +21,7 @@
     public double AbsorbRatio = 0;
     public int    Slot        = 0;
     private static final boolean DEBUG = false; //Only enable this if you wish to be spamed with debugging information.
-                                                //Left it in because I figured it'd be useful for modders developing custom armor.
+    //Left it in because I figured it'd be useful for modders developing custom armor.
 
     public ArmorProperties(int priority, double ratio, int max)
     {
@@ -45,16 +45,21 @@
         {
             System.out.println("Start: " + damage + " " + (damage * 25));
         }
+
         damage *= 25;
         ArrayList<ArmorProperties> dmgVals = new ArrayList<ArmorProperties>();
+
         for (int x = 0; x < inventory.length; x++)
         {
             ItemStack stack = inventory[x];
+
             if (stack == null)
             {
                 continue;
             }
+
             ArmorProperties prop = null;
+
             if (stack.getItem() instanceof ISpecialArmor)
             {
                 ISpecialArmor armor = (ISpecialArmor)stack.getItem();
@@ -65,18 +70,21 @@
                 ItemArmor armor = (ItemArmor)stack.getItem();
                 prop = new ArmorProperties(0, armor.damageReduceAmount / 25D, armor.getMaxDamage() + 1 - stack.getItemDamage());
             }
+
             if (prop != null)
             {
                 prop.Slot = x;
                 dmgVals.add(prop);
             }
         }
+
         if (dmgVals.size() > 0)
         {
             ArmorProperties[] props = dmgVals.toArray(new ArmorProperties[0]);
             StandardizeList(props, damage);
             int level = props[0].Priority;
             double ratio = 0;
+
             for (ArmorProperties prop : props)
             {
                 if (level != prop.Priority)
@@ -85,13 +93,15 @@
                     ratio = 0;
                     level = prop.Priority;
                 }
-                ratio += prop.AbsorbRatio;
 
+                ratio += prop.AbsorbRatio;
                 double absorb = damage * prop.AbsorbRatio;
+
                 if (absorb > 0)
                 {
                     ItemStack stack = inventory[prop.Slot];
                     int itemDamage = (int)(absorb / 25D < 1 ? 1 : absorb / 25D);
+
                     if (stack.getItem() instanceof ISpecialArmor)
                     {
                         ((ISpecialArmor)stack.getItem()).damageArmor(entity, stack, source, itemDamage, prop.Slot);
@@ -102,25 +112,32 @@
                         {
                             System.out.println("Item: " + stack.toString() + " Absorbed: " + (absorb / 25D) + " Damaged: " + itemDamage);
                         }
+
                         stack.damageItem(itemDamage, entity);
                     }
+
                     if (stack.stackSize <= 0)
                     {
                         if (entity instanceof EntityPlayer)
                         {
                             stack.onItemDestroyedByUse((EntityPlayer)entity);
                         }
+
                         inventory[prop.Slot] = null;
                     }
                 }
             }
+
             damage -= (damage * ratio);
         }
+
         damage += entity.carryoverDamage;
+
         if (DEBUG)
         {
             System.out.println("Return: " + (int)(damage / 25D) + " " + damage);
         }
+
         entity.carryoverDamage = (int)damage % 25;
         return (int)(damage / 25D);
     }
@@ -134,7 +151,6 @@
     private static void StandardizeList(ArmorProperties[] armor, double damage)
     {
         Arrays.sort(armor);
-
         int     start     = 0;
         double  total     = 0;
         int     priority  = armor[0].Priority;
@@ -148,12 +164,14 @@
             {
                 System.out.println(prop);
             }
+
             System.out.println("========================");
         }
 
         for (int x = 0; x < armor.length; x++)
         {
             total += armor[x].AbsorbRatio;
+
             if (x == armor.length - 1 || armor[x].Priority != priority)
             {
                 if (armor[x].Priority != priority)
@@ -162,19 +180,23 @@
                     x--;
                     pChange = true;
                 }
+
                 if (total > 1)
                 {
                     for (int y = start; y <= x; y++)
                     {
                         double newRatio = armor[y].AbsorbRatio / total;
+
                         if (newRatio * damage > armor[y].AbsorbMax)
                         {
                             armor[y].AbsorbRatio = (double)armor[y].AbsorbMax / damage;
                             total = 0;
+
                             for (int z = pStart; z <= y; z++)
                             {
                                 total += armor[z].AbsorbRatio;
                             }
+
                             start = y + 1;
                             x = y;
                             break;
@@ -185,6 +207,7 @@
                             pFinished = true;
                         }
                     }
+
                     if (pChange && pFinished)
                     {
                         damage -= (damage * total);
@@ -194,12 +217,14 @@
                         pStart = start;
                         pChange = false;
                         pFinished = false;
+
                         if (damage <= 0)
                         {
                             for (int y = x + 1; y < armor.length; y++)
                             {
                                 armor[y].AbsorbRatio = 0;
                             }
+
                             break;
                         }
                     }
@@ -209,32 +234,39 @@
                     for (int y = start; y <= x; y++)
                     {
                         total -= armor[y].AbsorbRatio;
+
                         if (damage * armor[y].AbsorbRatio > armor[y].AbsorbMax)
                         {
                             armor[y].AbsorbRatio = (double)armor[y].AbsorbMax / (double)damage;
                         }
+
                         total += armor[y].AbsorbRatio;
                     }
+
                     damage -= (damage * total);
                     total = 0;
+
                     if (x != armor.length - 1)
                     {
                         start = x + 1;
                         priority = armor[start].Priority;
                         pStart = start;
                         pChange = false;
+
                         if (damage <= 0)
                         {
                             for (int y = x + 1; y < armor.length; y++)
                             {
                                 armor[y].AbsorbRatio = 0;
                             }
+
                             break;
                         }
                     }
                 }
             }
         }
+
         if (DEBUG)
         {
             for (ArmorProperties prop : armor)
@@ -250,7 +282,8 @@
         {
             return o.Priority - Priority;
         }
-        double left =  (  AbsorbRatio == 0 ? 0 :   AbsorbMax * 100.0D /   AbsorbRatio);
+
+        double left = (AbsorbRatio == 0 ? 0 :   AbsorbMax * 100.0D /   AbsorbRatio);
         double right = (o.AbsorbRatio == 0 ? 0 : o.AbsorbMax * 100.0D / o.AbsorbRatio);
         return (int)(left - right);
     }
