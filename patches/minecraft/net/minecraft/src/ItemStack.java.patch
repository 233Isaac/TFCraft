--- ../src_base/minecraft/net/minecraft/src/ItemStack.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft/net/minecraft/src/ItemStack.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import net.minecraft.src.TFC_Core.TFCHeat;
+
 public final class ItemStack
 {
     /** Size of the stack. */
@@ -478,10 +480,10 @@
      */
     public List getItemNameandInformation()
     {
-        ArrayList var1 = new ArrayList();
+        ArrayList arraylist = new ArrayList();
         Item var2 = Item.itemsList[this.itemID];
-        var1.add(var2.getItemDisplayName(this));
-        var2.addInformation(this, var1);
+        arraylist.add(var2.getItemDisplayName(this));
+        var2.addInformation(this, arraylist);
 
         if (this.hasTagCompound())
         {
@@ -496,13 +498,97 @@
 
                     if (Enchantment.enchantmentsList[var5] != null)
                     {
-                        var1.add(Enchantment.enchantmentsList[var5].getTranslatedName(var6));
+                        arraylist.add(Enchantment.enchantmentsList[var5].getTranslatedName(var6));
+                    }
+                }
+            }
+
+            if (stackTagCompound.hasKey("temperature"))
+            {
+                float temp = stackTagCompound.getFloat("temperature");
+                float meltTemp = 0;
+
+                if (stackTagCompound.hasKey("Item1Melted") && stackTagCompound.getBoolean("Item1Melted") == true)
+                {
+                    meltTemp = TFCHeat.getMeltingPoint2(this);
+                }
+                else
+                {
+                    meltTemp = TFCHeat.getMeltingPoint(this);
+                }
+
+                if (meltTemp != -1)
+                {
+                    if (this.getItem() instanceof ItemFood)
+                    {
+                        arraylist.add(TFCHeat.getHeatColorFood(temp, meltTemp));
                     }
+                    else if (this.itemID == Item.stick.shiftedIndex)
+                    {
+                        arraylist.add(TFCHeat.getHeatColorTorch(temp, meltTemp));
+                    }
+                    else
+                    {
+                        arraylist.add(TFCHeat.getHeatColor(temp, meltTemp));
+                    }
+                }
+            }
+
+            if (stackTagCompound.getInteger("itemCraftingValue") != 0)
+            {
+                arraylist.add("This Item Has Been Worked");
+
+                if (stackTagCompound.hasKey("itemCraftingRule1"))
+                {
+                    arraylist.add("  \u2022" + getRuleFromId(stackTagCompound.getInteger("itemCraftingRule1")));
+                }
+
+                if (stackTagCompound.hasKey("itemCraftingRule2"))
+                {
+                    arraylist.add("  \u2022" + getRuleFromId(stackTagCompound.getInteger("itemCraftingRule2")));
+                }
+
+                if (stackTagCompound.hasKey("itemCraftingRule3"))
+                {
+                    arraylist.add("  \u2022" + getRuleFromId(stackTagCompound.getInteger("itemCraftingRule3")));
                 }
             }
         }
 
-        return var1;
+        return arraylist;
+    }
+
+    public static String getRuleFromId(int id)
+    {
+        switch (id)
+        {
+            case 0:
+                return "Hammer";
+
+            case 1:
+                return "Draw";
+
+            case 2:
+                return "Quench";
+
+            case 3:
+                return "Punch";
+
+            case 4:
+                return "Bend";
+
+            case 5:
+                return "Upset";
+
+            case 6:
+                return "Shrink";
+
+            case 7:
+                return "Weld";
+
+            default:
+                return "";
+        }
     }
 
     public boolean hasEffect()
