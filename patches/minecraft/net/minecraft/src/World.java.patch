--- ../src_base/minecraft/net/minecraft/src/World.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft/net/minecraft/src/World.java	0000-00-00 00:00:00.000000000 -0000
@@ -13,13 +13,13 @@
 
 public class World implements IBlockAccess
 {
-	/**
-	 * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
-	 * Modders should change this variable to a higher value if it is less then the radius 
-	 * of one of there entities.
-	 */
-	public static double MAX_ENTITY_RADIUS = 2.0D;
-	
+    /**
+     * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+     * Modders should change this variable to a higher value if it is less then the radius
+     * of one of there entities.
+     */
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+
     /**
      * boolean; if true updates scheduled by scheduleBlockUpdate happen immediately
      */
@@ -2136,9 +2136,10 @@
     public void addTileEntity(Collection par1Collection)
     {
         List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
-        for(Object entity : par1Collection) 
+
+        for (Object entity : par1Collection)
         {
-            if(((TileEntity)entity).canUpdate())
+            if (((TileEntity)entity).canUpdate())
             {
                 dest.add(entity);
             }
@@ -2340,14 +2341,14 @@
                         if (var11 == Block.fire.blockID || var11 == Block.lavaMoving.blockID || var11 == Block.lavaStill.blockID)
                         {
                             return true;
-                        } 
-                        else 
+                        }
+                        else
                         {
-                        	if(var11 > 0 && Block.blocksList[var11].isBlockBurning(this, var8, var9, var10))
-                        	{
-                        		return true;
-                        	}
-                    	}
+                            if (var11 > 0 && Block.blocksList[var11].isBlockBurning(this, var8, var9, var10))
+                            {
+                                return true;
+                            }
+                        }
                     }
                 }
             }
@@ -2655,12 +2656,16 @@
         {
             return;
         }
+
         List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+
         if (par4TileEntity.canUpdate())
         {
             dest.add(par4TileEntity);
         }
+
         Chunk chunk = getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+
         if (chunk != null)
         {
             chunk.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
@@ -2673,6 +2678,7 @@
     public void removeBlockTileEntity(int par1, int par2, int par3)
     {
         Chunk chunk = getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+
         if (chunk != null)
         {
             chunk.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
@@ -2983,8 +2989,8 @@
                 }
             }
         }
-        ForgeHooks.addActiveChunks(this, activeChunkSet);
 
+        ForgeHooks.addActiveChunks(this, activeChunkSet);
         Profiler.endSection();
 
         if (this.ambientTickCountdown > 0)
@@ -3839,10 +3845,12 @@
             {
                 var8 = null;
             }
+
             if (var8 != null && var8.isBlockReplaceable(this, par2, par3, par4))
             {
                 var8 = null;
             }
+
             return par1 > 0 && var8 == null && var9.canPlaceBlockOnSide(this, par2, par3, par4, par6);
         }
     }
@@ -4446,26 +4454,26 @@
     {
         return this.worldInfo.getTerrainType() == WorldType.FLAT ? 0.0D : 63.0D;
     }
-    
 
     /**
      * Adds a single TileEntity to the world.
      * TODO: Eloraam fully describe the bug this fixes.
      * @param entity The TileEntity to be added.
      */
-    public void addTileEntity(TileEntity entity) 
+    public void addTileEntity(TileEntity entity)
     {
-    	List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
-    	if(entity.canUpdate())
-    	{
-    		dest.add(entity);
-    	}
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+
+        if (entity.canUpdate())
+        {
+            dest.add(entity);
+        }
     }
-    
+
     /**
      * Determine if the given block is considered solid on the
      * specified side.  Used by placement logic.
-     * 
+     *
      * @param X Block X Position
      * @param Y Block Y Position
      * @param Z Block Z Position
@@ -4475,10 +4483,12 @@
     public boolean isBlockSolidOnSide(int X, int Y, int Z, int side)
     {
         Block block = Block.blocksList[getBlockId(X, Y, Z)];
-        if(block == null)
+
+        if (block == null)
         {
-        	return false;
+            return false;
         }
+
         return block.isBlockSolidOnSide(this, X, Y, Z, side);
     }
 }
