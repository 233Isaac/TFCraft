--- ../src_base/minecraft/net/minecraft/src/Item.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft/net/minecraft/src/Item.java	0000-00-00 00:00:00.000000000 -0000
@@ -189,10 +189,10 @@
 
     /** full name of item from language file */
     private String itemName;
-    
+
     /** FORGE: To disable repair recipes. */
     protected boolean canRepair = true;
-    
+
     protected Item(int par1)
     {
         this.shiftedIndex = 256 + par1;
@@ -583,30 +583,30 @@
     {
         StatList.initStats();
     }
-    
+
     /* =========================================================== FORGE START ===============================================================*/
-    
+
     /**
-     * Called when a new CreativeContainer is opened, populate the list 
+     * Called when a new CreativeContainer is opened, populate the list
      * with all of the items for this item you want a player in creative mode
      * to have access to.
-     * 
+     *
      * @param itemList The list of items currently in the creative inventory
      */
     public void addCreativeItems(ArrayList itemList)
-    {       
+    {
         if (this.shiftedIndex != Item.potion.shiftedIndex && this.shiftedIndex != Item.monsterPlacer.shiftedIndex)
         {
             itemList.add(new ItemStack(this, 1));
         }
     }
-    
+
     /**
      * Called when a player drops the item into the world,
      * returning false from this will prevent the item from
      * being removed from the players inventory and spawning
      * in the world
-     * 
+     *
      * @param player The player that dropped the item
      * @param item The item stack, before the item is removed.
      */
@@ -626,7 +626,7 @@
      * @param side The side of the target hit
      * @return Return true to prevent any further processing.
      */
-    public boolean onItemUseFirst(ItemStack stack, EntityPlayer player, World world, int X, int Y, int Z, int side) 
+    public boolean onItemUseFirst(ItemStack stack, EntityPlayer player, World world, int X, int Y, int Z, int side)
     {
         return false;
     }
@@ -642,12 +642,12 @@
     {
         return getStrVsBlock(itemstack, block);
     }
-    
+
     /**
      * Called by CraftingManager to determine if an item is reparable.
      * @return True if reparable
      */
-    public boolean isRepairable() 
+    public boolean isRepairable()
     {
         return canRepair && isDamageable();
     }
@@ -656,17 +656,17 @@
      * Call to disable repair recipes.
      * @return The current Item instance
      */
-    public Item setNoRepair() 
+    public Item setNoRepair()
     {
         canRepair = false;
         return this;
     }
-    
+
     /**
      * Called before a block is broken.  Return true to prevent default block harvesting.
      *
      * Note: In SMP, this is called on both client and server sides!
-     * 
+     *
      * @param itemstack The current ItemStack
      * @param X The X Position
      * @param Y The X Position
@@ -674,7 +674,7 @@
      * @param player The Player that is wielding the item
      * @return True to prevent harvesting, false to continue as normal
      */
-    public boolean onBlockStartBreak(ItemStack itemstack, int X, int Y, int Z, EntityPlayer player) 
+    public boolean onBlockStartBreak(ItemStack itemstack, int X, int Y, int Z, EntityPlayer player)
     {
         return false;
     }
@@ -685,28 +685,28 @@
      * @param player The Player using the item
      * @param count The amount of time in tick the item has been used for continuously
      */
-    public void onUsingItemTick(ItemStack stack, EntityPlayer player, int count) 
+    public void onUsingItemTick(ItemStack stack, EntityPlayer player, int count)
     {
     }
-    
+
     /**
      * Called when the player Left Clicks (attacks) an entity.
      * Processed before damage is done, if return value is true further processing is canceled
      * and the entity is not attacked.
-     * 
+     *
      * @param stack The Item being used
      * @param player The player that is attacking
      * @param entity The entity being attacked
      * @return True to cancel the rest of the interaction.
      */
-    public boolean onLeftClickEntity(ItemStack stack, EntityPlayer player, Entity entity) 
+    public boolean onLeftClickEntity(ItemStack stack, EntityPlayer player, Entity entity)
     {
         return false;
     }
-    
+
     /**
      * Player, Render pass, and item usage sensitive version of getIconIndex.
-     *   
+     *
      * @param stack The item stack to get the icon for. (Usually this, and usingItem will be the same if usingItem is not null)
      * @param renderPass The pass to get the icon for, 0 is default.
      * @param player The player holding the item
@@ -728,12 +728,12 @@
          */
         return getIconIndex(stack);
     }
-    
+
     /**
      * Returns the number of render passes/layers this item has.
      * Usually equates to ItemRenderer.renderItem being called for this many passes.
      * Does not get called unless func_46058_c() is true;
-     * 
+     *
      * @param metadata The item's metadata
      * @return The number of passes to run.
      */
