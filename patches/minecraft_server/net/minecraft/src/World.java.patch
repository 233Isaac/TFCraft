--- ../src_base/minecraft_server/net/minecraft/src/World.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/net/minecraft/src/World.java	0000-00-00 00:00:00.000000000 -0000
@@ -13,13 +13,13 @@
 
 public class World implements IBlockAccess
 {
-	/**
-	 * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
-	 * Modders should change this variable to a higher value if it is less then the radius 
-	 * of one of there entities.
-	 */
-	public static double MAX_ENTITY_RADIUS = 2.0D;
-	
+    /**
+     * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+     * Modders should change this variable to a higher value if it is less then the radius
+     * of one of there entities.
+     */
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+
     /**
      * boolean; if true updates scheduled by scheduleBlockUpdate happen immediately
      */
@@ -1669,9 +1669,10 @@
     public void addTileEntity(Collection par1Collection)
     {
         List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
-        for(Object entity : par1Collection)
+
+        for (Object entity : par1Collection)
         {
-            if(((TileEntity)entity).canUpdate()) 
+            if (((TileEntity)entity).canUpdate())
             {
                 dest.add(entity);
             }
@@ -1919,8 +1920,8 @@
                         if (var11 == Block.fire.blockID || var11 == Block.lavaMoving.blockID || var11 == Block.lavaStill.blockID)
                         {
                             return true;
-                        } 
-                        else 
+                        }
+                        else
                         {
                             if (var11 > 0 && Block.blocksList[var11] != null && Block.blocksList[var11].isBlockBurning(this, var8, var9, var10))
                             {
@@ -2213,12 +2214,14 @@
         {
             return;
         }
+
         List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+
         if (par4TileEntity.canUpdate())
         {
             dest.add(par4TileEntity);
         }
-        
+
         Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
 
         if (var5 != null)
@@ -2233,6 +2236,7 @@
     public void removeBlockTileEntity(int par1, int par2, int par3)
     {
         Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+
         if (var5 != null)
         {
             var5.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
@@ -2537,8 +2541,8 @@
                 }
             }
         }
-        ForgeHooks.addActiveChunks(this, activeChunkSet);
 
+        ForgeHooks.addActiveChunks(this, activeChunkSet);
         Profiler.endSection();
 
         if (this.ambientTickCountdown > 0)
@@ -3347,7 +3351,7 @@
             {
                 var8 = null;
             }
-            
+
             if (var8 != null && var8.isBlockReplaceable(this, par2, par3, par4))
             {
                 var8 = null;
@@ -3868,19 +3872,20 @@
      * TODO: Eloraam fully describe the bug this fixes.
      * @param entity The TileEntity to be added.
      */
-    public void addTileEntity(TileEntity entity) 
+    public void addTileEntity(TileEntity entity)
     {
         List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
-        if(entity.canUpdate())
+
+        if (entity.canUpdate())
         {
             dest.add(entity);
         }
     }
-    
+
     /**
      * Determine if the given block is considered solid on the
      * specified side.  Used by placement logic.
-     * 
+     *
      * @param x Block X Position
      * @param y Block Y Position
      * @param z Block Z Position
@@ -3890,10 +3895,12 @@
     public boolean isBlockSolidOnSide(int x, int y, int z, int side)
     {
         Block block = Block.blocksList[getBlockId(x, y, z)];
-        if(block == null)
+
+        if (block == null)
         {
             return false;
         }
+
         return block.isBlockSolidOnSide(this, x, y, z, side);
     }
 }
