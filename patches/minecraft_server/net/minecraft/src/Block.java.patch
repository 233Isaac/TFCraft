--- ../src_base/minecraft_server/net/minecraft/src/Block.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/net/minecraft/src/Block.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.Random;
 
+import net.minecraft.src.TFC_Core.*;
 import net.minecraft.src.forge.ForgeHooks;
 
 public class Block
@@ -43,8 +44,8 @@
     public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
     public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt");
     public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
-    public static final Block planks = (new BlockWood(5)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
-    public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("sapling").setRequiresSelfNotify();
+    public static final Block planks = (new BlockTerraPlanks(5, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
+    public static final Block sapling = (new BlockCustomSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("sapling").setRequiresSelfNotify();
     public static final Block bedrock = (new Block(7, 17, Material.rock)).setBlockUnbreakable().setResistance(6000000.0F).setStepSound(soundStoneFootstep).setBlockName("bedrock").disableStats();
     public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3).setBlockName("water").disableStats().setRequiresSelfNotify();
     public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3).setBlockName("water").disableStats().setRequiresSelfNotify();
@@ -57,8 +58,8 @@
     public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold");
     public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
     public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
-    public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
-    public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
+    public static final Block wood = (new BlockTerraWood(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
+    public static final BlockLeaves leaves = (BlockLeaves)(new BlockCustomLeaves(18, 96)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
     public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
     public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("glass");
     public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
@@ -71,16 +72,16 @@
     public static final Block railDetector = (new BlockDetectorRail(28, 195)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("detectorRail").setRequiresSelfNotify();
     public static final Block pistonStickyBase = (new BlockPistonBase(29, 106, true)).setBlockName("pistonStickyBase").setRequiresSelfNotify();
     public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web");
-    public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass");
+    public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockCustomTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass");
     public static final BlockDeadBush deadBush = (BlockDeadBush)(new BlockDeadBush(32, 55)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("deadbush");
     public static final Block pistonBase = (new BlockPistonBase(33, 107, false)).setBlockName("pistonBase").setRequiresSelfNotify();
     public static final BlockPistonExtension pistonExtension = (BlockPistonExtension)(new BlockPistonExtension(34, 107)).setRequiresSelfNotify();
     public static final Block cloth = (new BlockCloth()).setHardness(0.8F).setStepSound(soundClothFootstep).setBlockName("cloth").setRequiresSelfNotify();
     public static final BlockPistonMoving pistonMoving = new BlockPistonMoving(36);
-    public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("flower");
-    public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("rose");
-    public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F).setBlockName("mushroom");
-    public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
+    public static final BlockFlower plantYellow = (BlockFlower)(new BlockCustomFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("flower");
+    public static final BlockFlower plantRed = (BlockFlower)(new BlockCustomFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("rose");
+    public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockCustomMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F).setBlockName("mushroom");
+    public static final BlockFlower mushroomRed = (BlockFlower)(new BlockCustomMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
     public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold");
     public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron");
     public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
@@ -93,7 +94,7 @@
     public static final Block torchWood = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(soundWoodFootstep).setBlockName("torch").setRequiresSelfNotify();
     public static final BlockFire fire = (BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("fire").disableStats();
     public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("mobSpawner").disableStats();
-    public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsWood").setRequiresSelfNotify();
+    public static final Block stairCompactPlanks = (new BlockCustomStairs(53, planks)).setBlockName("stairsWood").setRequiresSelfNotify();
     public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify();
     public static final Block redstoneWire = (new BlockRedstoneWire(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setBlockName("redstoneDust").disableStats().setRequiresSelfNotify();
     public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
@@ -118,12 +119,12 @@
     public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
     public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
     public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("button").setRequiresSelfNotify();
-    public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow").setLightOpacity(0);
+    public static final Block snow = (new BlockCustomSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow").setLightOpacity(0);
     public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice");
     public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow");
     public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setBlockName("cactus");
     public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay");
-    public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
+    public static final Block reed = (new BlockCustomReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
     public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify();
     public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence");
     public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkin").setRequiresSelfNotify();
@@ -538,7 +539,6 @@
         return this.blockID;
     }
 
-
     /**
      * Deprecated in favor of a metadata sensitive version
      * @param entityplayer Entity attacking the block
@@ -566,8 +566,8 @@
         if (!par1World.isRemote)
         {
             int var8 = this.quantityDroppedWithBonus(par7, par1World.rand);
-            
             ArrayList<ItemStack> items = getBlockDropped(par1World, par2, par3, par4, par5, par7);
+
             for (ItemStack item : items)
             {
                 if (par1World.rand.nextFloat() <= par6)
@@ -975,51 +975,51 @@
     /* =================================================== FORGE START =====================================*/
     /**
      * Get a light value for this block, normal ranges are between 0 and 15
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
      * @param z Z position
      * @return The light value
      */
-    public int getLightValue(IBlockAccess world, int x, int y, int z) 
+    public int getLightValue(IBlockAccess world, int x, int y, int z)
     {
         return lightValue[blockID];
     }
 
     /**
      * Checks if a player or entity can use this block to 'climb' like a ladder.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
      * @param z Z position
      * @return True if the block should act like a ladder
      */
-    public boolean isLadder(World world, int x, int y, int z) 
+    public boolean isLadder(World world, int x, int y, int z)
     {
         return false;
     }
-    
+
     /**
      * Return true if the block is a normal, solid cube.  This
      * determines indirect power state, entity ejection from blocks, and a few
      * others.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
      * @param z Z position
      * @return True if the block is a full cube
      */
-    public boolean isBlockNormalCube(World world, int x, int y, int z) 
+    public boolean isBlockNormalCube(World world, int x, int y, int z)
     {
         return blockMaterial.isOpaque() && renderAsNormalBlock();
     }
 
     /**
      * Checks if the block is a solid face on the given side, used by placement logic.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
@@ -1027,9 +1027,10 @@
      * @param size The side to check
      * @return True if the block is solid on the specified side.
      */
-    public boolean isBlockSolidOnSide(World world, int x, int y, int z, int side) 
+    public boolean isBlockSolidOnSide(World world, int x, int y, int z, int side)
     {
         int meta = world.getBlockMetadata(x, y, z);
+
         if (this instanceof BlockStep)
         {
             return (((meta & 8) == 8 && (side == 1)) || isOpaqueCube());
@@ -1043,20 +1044,21 @@
             boolean flipped = ((meta & 4) != 0);
             return ((meta & 3) + side == 5) || (side == 1 && flipped);
         }
+
         return isBlockNormalCube(world, x, y, z);
     }
 
     /**
      * Determines if a new block can be replace the space occupied by this one,
      * Used in the player's placement code to make the block act like water, and lava.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
      * @param z Z position
      * @return True if the block is replaceable by another block
      */
-    public boolean isBlockReplaceable(World world, int x, int y, int z) 
+    public boolean isBlockReplaceable(World world, int x, int y, int z)
     {
         return false;
     }
@@ -1064,81 +1066,81 @@
     /**
      * Determines if this block should set fire and deal fire damage
      * to entities coming into contact with it.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
      * @param z Z position
      * @return True if the block should deal damage
      */
-    public boolean isBlockBurning(World world, int x, int y, int z) 
+    public boolean isBlockBurning(World world, int x, int y, int z)
     {
         return false;
     }
-    
+
     /**
      * Determines this block should be treated as an air block
      * by the rest of the code. This method is primarily
-     * useful for creating pure logic-blocks that will be invisible 
+     * useful for creating pure logic-blocks that will be invisible
      * to the player and otherwise interact as air would.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param y Y position
      * @param z Z position
      * @return True if the block considered air
      */
-    public boolean isAirBlock(World world, int x, int y, int z) 
+    public boolean isAirBlock(World world, int x, int y, int z)
     {
         return false;
     }
 
     /**
      * Metadata sensitive version of the default getHardness function.
-     * 
+     *
      * @param meta The block's current metatdata
      * @return Block hardness
      */
-    public float getHardness(int meta) 
+    public float getHardness(int meta)
     {
         return blockHardness;
     }
 
     /**
      * Determines this block's strength against being destroyed by a player.
-     * 
+     *
      * @param world The current world
      * @param player The player damaging the block, may be null
      * @param x X Position
      * @param y Y position
      * @param z Z position
-     * @return A value 
+     * @return A value
      */
-    public float blockStrength(World world, EntityPlayer player, int x, int y, int z) 
+    public float blockStrength(World world, EntityPlayer player, int x, int y, int z)
     {
         return blockStrength(player, world.getBlockMetadata(x, y, z));
     }
 
     /**
      * Determines this block's strength against being destroyed by a player.
-     * 
+     *
      * @param player The player damaging the block, may be null
      * @param meta The block's current metadata
      * @return The larger the value, the faster it breaks.
      */
-    public float blockStrength(EntityPlayer player, int meta) 
+    public float blockStrength(EntityPlayer player, int meta)
     {
         return ForgeHooks.blockStrength(this, player, meta);
     }
 
     /**
      * Determines if the player can harvest this block, obtaining it's drops when the block is destroyed.
-     * 
+     *
      * @param player The player damaging the block, may be null
      * @param meta The block's current metadata
      * @return True tospawn the drops
      */
-    public boolean canHarvestBlock(EntityPlayer player, int meta) 
+    public boolean canHarvestBlock(EntityPlayer player, int meta)
     {
         return ForgeHooks.canHarvestBlock(this, player, meta);
     }
@@ -1147,13 +1149,13 @@
      * Called when a player removes a block.  This is responsible for
      * actually destroying the block, and the block is intact at time of call.
      * This is called regardless of whether the player can harvest the block or
-     * not.  
-     * 
+     * not.
+     *
      * Return true if the block is actually destroyed.
      *
      * Note: When used in multiplayer, this is called on both client and
      * server sides!
-     * 
+     *
      * @param world The current world
      * @param player The player damaging the block, may be null
      * @param x X Position
@@ -1161,29 +1163,29 @@
      * @param z Z position
      * @return True if the block is actually destroyed.
      */
-    public boolean removeBlockByPlayer(World world, EntityPlayer player, int x, int y, int z) 
+    public boolean removeBlockByPlayer(World world, EntityPlayer player, int x, int y, int z)
     {
         return world.setBlockWithNotify(x, y, z, 0);
     }
 
     /**
-     * Called when a new CreativeContainer is opened, populate the list 
+     * Called when a new CreativeContainer is opened, populate the list
      * with all of the items for this block you want a player in creative mode
      * to have access to.
-     * 
+     *
      * @param itemList The list of items to display on the creative inventory.
      */
     public void addCreativeItems(ArrayList itemList)
-    {       
+    {
     }
-    
+
     protected static int blockFireSpreadSpeed[] = new int[256];
     protected static int blockFlammability[] = new int[256];
-    
+
     /**
      * Chance that fire will spread and consume this block.
      * 300 being a 100% chance, 0, being a 0% chance.
-     * 
+     *
      * @param world The current world
      * @param x The blocks X position
      * @param y The blocks Y position
@@ -1196,11 +1198,11 @@
     {
         return blockFlammability[blockID];
     }
-    
+
     /**
      * Called when fire is updating, checks if a block face can catch fire.
-     * 
-     * 
+     *
+     *
      * @param world The current world
      * @param x The blocks X position
      * @param y The blocks Y position
@@ -1213,11 +1215,11 @@
     {
         return getFlammability(world, x, y, z, metadata, face) > 0;
     }
-    
+
     /**
      * Called when fire is updating on a neighbor block.
      * The higher the number returned, the faster fire will spread around this block.
-     * 
+     *
      * @param world The current world
      * @param x The blocks X position
      * @param y The blocks Y position
@@ -1230,19 +1232,19 @@
     {
         return blockFireSpreadSpeed[blockID];
     }
-    
+
     /**
      * Currently only called by fire when it is on top of this block.
      * Returning true will prevent the fire from naturally dying during updating.
      * Also prevents firing from dying from rain.
-     * 
+     *
      * @param world The current world
      * @param x The blocks X position
      * @param y The blocks Y position
      * @param z The blocks Z position
      * @param metadata The blocks current metadata
      * @param face The face that the fire is coming from
-     * @return 
+     * @return
      */
     public boolean isFireSource(World world, int x, int y, int z, int metadata, int face)
     {
@@ -1250,10 +1252,12 @@
         {
             return true;
         }
+
         if ((world.worldProvider instanceof WorldProviderEnd) && blockID == Block.bedrock.blockID && face == 0)
         {
             return true;
         }
+
         return false;
     }
 
@@ -1271,11 +1275,11 @@
 
     /**
      * Called throughout the code as a replacement for block instanceof BlockContainer
-     * Moving this to the Block base class allows for mods that wish to extend vinella 
+     * Moving this to the Block base class allows for mods that wish to extend vinella
      * blocks, and also want to have a tile entity on that block, may.
-     * 
+     *
      * Return true from this function to specify this block has a tile entity.
-     * 
+     *
      * @param metadata Metadata of the current block
      * @return True if block has a tile entity, false otherwise
      */
@@ -1283,12 +1287,12 @@
     {
         return isBlockContainer;
     }
-    
+
     /**
      * Called throughout the code as a replacement for BlockContainer.getBlockEntity
      * Return the same thing you would from that function.
      * This will fall back to BlockContainer.getBlockEntity if this block is a BlockContainer.
-     * 
+     *
      * @param metadata The Metadata of the current block
      * @return A instance of a class extending TileEntity
      */
@@ -1298,13 +1302,14 @@
         {
             return ((BlockContainer)this).getBlockEntity(metadata);
         }
+
         return null;
-    }    
-    
+    }
+
     /**
      * Metadata and fortune sensitive version, this replaces the old (int meta, Random rand)
-     * version in 1.1. 
-     * 
+     * version in 1.1.
+     *
      * @param meta Blocks Metadata
      * @param fortune Current item fortune level
      * @param random Random number generator
@@ -1314,10 +1319,10 @@
     {
         return quantityDroppedWithBonus(fortune, random);
     }
-    
+
     /**
      * This returns a complete list of items dropped from this block.
-     * 
+     *
      * @param world The current world
      * @param x X Position
      * @param Y Y Position
@@ -1329,22 +1334,24 @@
     public ArrayList<ItemStack> getBlockDropped(World world, int x, int y, int z, int metadata, int fortune)
     {
         ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
-        
         int count = quantityDropped(metadata, fortune, world.rand);
-        for(int i = 0; i < count; i++)
+
+        for (int i = 0; i < count; i++)
         {
             int id = idDropped(metadata, world.rand, 0);
+
             if (id > 0)
             {
                 ret.add(new ItemStack(id, 1, damageDropped(metadata)));
             }
         }
+
         return ret;
     }
-    
+
     /**
      * Return true from this function if the player with silk touch can harvest this block directly, and not it's normal drops.
-     * 
+     *
      * @param world The world
      * @param player The player doing the harvesting
      * @param x X Position
@@ -1355,13 +1362,14 @@
      */
     public boolean canSilkHarvest(World world, EntityPlayer player, int x, int y, int z, int metadata)
     {
-    	if (this instanceof BlockGlass)
-    	{
-    		return true;
-    	}
-    	return renderAsNormalBlock() && !hasTileEntity(metadata);
+        if (this instanceof BlockGlass)
+        {
+            return true;
+        }
+
+        return renderAsNormalBlock() && !hasTileEntity(metadata);
     }
-    
+
     static
     {
         Item.itemsList[cloth.blockID] = (new ItemCloth(cloth.blockID - 256)).setItemName("cloth");
