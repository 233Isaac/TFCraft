--- ../src_base/minecraft_server/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
@@ -143,11 +143,11 @@
     }
 
     /**
-     * Metadata sensitive Chunk constructor for use in new ChunkProviders that 
+     * Metadata sensitive Chunk constructor for use in new ChunkProviders that
      * use metadata sensitive blocks during generation.
-     * 
+     *
      * @param world The world this chunk belongs to
-     * @param ids A ByteArray containing all the BlockID's to set this chunk to 
+     * @param ids A ByteArray containing all the BlockID's to set this chunk to
      * @param metadata A ByteArray containing all the metadata to set this chunk to
      * @param chunkX The chunk's X position
      * @param chunkZ The Chunk's Z position
@@ -571,7 +571,7 @@
             {
                 return false;
             }
-            
+
             ExtendedBlockStorage var9 = this.storageArrays[par2 >> 4];
             boolean var10 = false;
 
@@ -596,6 +596,7 @@
                 {
                     Block.blocksList[var8].onBlockRemoval(this.worldObj, var11, par2, var12);
                 }
+
                 if (Block.blocksList[var8] != null && Block.blocksList[var8].hasTileEntity(getBlockMetadata(par1, par2, par3)))
                 {
                     this.worldObj.removeBlockTileEntity(var11, par2, var12);
@@ -657,6 +658,7 @@
                         }
                     }
                 }
+
                 this.isModified = true;
                 return true;
             }
@@ -723,7 +725,7 @@
         {
             return;
         }
-        
+
         ExtendedBlockStorage var6 = this.storageArrays[par3 >> 4];
 
         if (var6 == null)
@@ -859,7 +861,7 @@
     {
         ChunkPosition var4 = new ChunkPosition(par1, par2, par3);
         TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-        
+
         if (var5 != null && var5.isInvalid())
         {
             chunkTileEntityMap.remove(var4);
@@ -870,6 +872,7 @@
         {
             int var6 = this.getBlockID(par1, par2, par3);
             int meta = getBlockMetadata(par1, par2, par3);
+
             if (var6 <= 0 || Block.blocksList[var6] == null || !Block.blocksList[var6].hasTileEntity(meta))
             {
                 return null;
@@ -883,6 +886,7 @@
 
             var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
         }
+
         return var5;
     }
 
@@ -912,15 +916,17 @@
         par4TileEntity.xCoord = this.xPosition * 16 + par1;
         par4TileEntity.yCoord = par2;
         par4TileEntity.zCoord = this.zPosition * 16 + par3;
-
         int id = getBlockID(par1, par2, par3);
+
         if (id > 0 && Block.blocksList[id] != null && Block.blocksList[id].hasTileEntity(getBlockMetadata(par1, par2, par3)))
         {
             TileEntity old = (TileEntity)chunkTileEntityMap.get(var5);
+
             if (old != null)
             {
                 old.invalidate();
             }
+
             par4TileEntity.validate();
             this.chunkTileEntityMap.put(var5, par4TileEntity);
         }
@@ -956,6 +962,7 @@
         {
             this.worldObj.addLoadedEntities(this.entityLists[var1]);
         }
+
         ForgeHooks.onChunkLoad(worldObj, this);
     }
 
@@ -977,6 +984,7 @@
         {
             this.worldObj.unloadEntities(this.entityLists[var3]);
         }
+
         ForgeHooks.onChunkUnload(worldObj, this);
     }
 
@@ -1339,14 +1347,16 @@
             }
         }
     }
-    
+
     /** FORGE: Used to remove only invalid TileEntities */
-    public void cleanChunkBlockTileEntity(int x, int y, int z) 
+    public void cleanChunkBlockTileEntity(int x, int y, int z)
     {
         ChunkPosition position = new ChunkPosition(x, y, z);
+
         if (isChunkLoaded)
         {
             TileEntity entity = (TileEntity)chunkTileEntityMap.get(position);
+
             if (entity != null && entity.isInvalid())
             {
                 chunkTileEntityMap.remove(position);
