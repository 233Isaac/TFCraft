--- ../src_base/minecraft_server/net/minecraft/src/forge/Configuration.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/net/minecraft/src/forge/Configuration.java	0000-00-00 00:00:00.000000000 -0000
@@ -27,7 +27,6 @@
  */
 public class Configuration
 {
-
     private boolean configBlocks[] = null;
 
     public static final String CATEGORY_GENERAL = "general";
@@ -35,9 +34,9 @@
     public static final String CATEGORY_ITEM    = "item";
 
     File file;
-    
+
     public Map<String, Map<String, Property>> categories = new TreeMap<String, Map<String, Property>>();
-    
+
     public TreeMap<String, Property> blockProperties   = new TreeMap<String, Property>();
     public TreeMap<String, Property> itemProperties    = new TreeMap<String, Property>();
     public TreeMap<String, Property> generalProperties = new TreeMap<String, Property>();
@@ -70,8 +69,9 @@
                 configBlocks[i] = false;
             }
         }
-        
+
         Map<String, Property> properties = categories.get(CATEGORY_BLOCK);
+
         if (properties.containsKey(key))
         {
             Property property = getOrCreateIntProperty(key, Configuration.CATEGORY_BLOCK, defaultId);
@@ -106,10 +106,11 @@
             }
         }
     }
-    
+
     public Property getOrCreateIntProperty(String key, String category, int defaultValue)
     {
         Property prop = getOrCreateProperty(key, category, Integer.toString(defaultValue));
+
         try
         {
             Integer.parseInt(prop.value);
@@ -121,10 +122,11 @@
             return prop;
         }
     }
-    
+
     public Property getOrCreateBooleanProperty(String key, String category, boolean defaultValue)
     {
         Property prop = getOrCreateProperty(key, category, Boolean.toString(defaultValue));
+
         if ("true".equals(prop.value.toLowerCase()) || "false".equals(prop.value.toLowerCase()))
         {
             return prop;
@@ -135,16 +137,16 @@
             return prop;
         }
     }
-    
+
     public Property getOrCreateProperty(String key, String category, String defaultValue)
     {
         category = category.toLowerCase();
         Map<String, Property> source = categories.get(category);
-        
-        if(source == null)
+
+        if (source == null)
         {
             source = new TreeMap<String, Property>();
-            categories.put(category, source);                                  
+            categories.put(category, source);
         }
 
         if (source.containsKey(key))
@@ -154,10 +156,8 @@
         else if (defaultValue != null)
         {
             Property property = new Property();
-
             source.put(key, property);
             property.name = key;
-
             property.value = defaultValue;
             return property;
         }
@@ -185,7 +185,6 @@
             {
                 FileInputStream fileinputstream = new FileInputStream(file);
                 BufferedReader buffer = new BufferedReader(new InputStreamReader(fileinputstream, "8859_1"));
-
                 String line;
                 Map<String, Property> currentMap = null;
 
@@ -223,20 +222,23 @@
                                 case '#':
                                     skip = true;
                                     continue;
+
                                 case '{':
                                     String scopeName = line.substring(nameStart, nameEnd + 1);
-
                                     currentMap = categories.get(scopeName);
+
                                     if (currentMap == null)
                                     {
                                         currentMap = new TreeMap<String, Property>();
-                                        categories.put(scopeName, currentMap);    
+                                        categories.put(scopeName, currentMap);
                                     }
 
                                     break;
+
                                 case '}':
                                     currentMap = null;
                                     break;
+
                                 case '=':
                                     String propertyName = line.substring(nameStart, nameEnd + 1);
 
@@ -249,10 +251,9 @@
                                     prop.name = propertyName;
                                     prop.value = line.substring(i + 1);
                                     i = line.length();
-
                                     currentMap.put(propertyName, prop);
-
                                     break;
+
                                 default:
                                     throw new RuntimeException("unknown character " + line.charAt(i));
                             }
@@ -285,17 +286,15 @@
             {
                 FileOutputStream fos = new FileOutputStream(file);
                 BufferedWriter buffer = new BufferedWriter(new OutputStreamWriter(fos, "8859_1"));
-
                 buffer.write("# Configuration file\r\n");
                 buffer.write("# Generated on " + DateFormat.getInstance().format(new Date()) + "\r\n");
                 buffer.write("\r\n");
-                
-                for(Map.Entry<String, Map<String, Property>> category : categories.entrySet())
+
+                for (Map.Entry<String, Map<String, Property>> category : categories.entrySet())
                 {
                     buffer.write("####################\r\n");
                     buffer.write("# " + category.getKey() + " \r\n");
                     buffer.write("####################\r\n\r\n");
-
                     buffer.write(category.getKey() + " {\r\n");
                     writeProperties(buffer, category.getValue().values());
                     buffer.write("}\r\n\r\n");
