--- ../src_base/minecraft_server/cpw/mods/fml/common/Loader.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/cpw/mods/fml/common/Loader.java	0000-00-00 00:00:00.000000000 -0000
@@ -36,10 +36,10 @@
 
 /**
  * The loader class performs the actual loading of the mod code from disk.
- * 
+ *
  * <p>There are several {@link State}s to mod loading, triggered in two different stages from the FML handler code's hooks into the
  * minecraft code.</p>
- * 
+ *
  * <ol>
  * <li>LOADING. Scanning the filesystem for mod containers to load (zips, jars, directories), adding them to the {@link #modClassLoader}
  * Scanning, the loaded containers for mod classes to load and registering them appropriately.</li>
@@ -50,11 +50,11 @@
  * <li>ERRORED. The loader encountered an error during the LOADING phase and dropped to this state instead. It will not complete
  * loading from this state, but it attempts to continue loading before abandoning and giving a fatal error.</li>
  * </ol>
- * 
+ *
  * Phase 1 code triggers the LOADING and PREINIT states. Phase 2 code triggers the INIT and POSTINIT states.
- * 
+ *
  * @author cpw
- * 
+ *
  */
 public class Loader
 {
@@ -80,7 +80,6 @@
      */
     public static Logger log = Logger.getLogger("ForgeModLoader");
 
-
     /**
      * Build information for tracking purposes.
      */
@@ -115,7 +114,6 @@
      */
     private File canonicalMinecraftDir;
 
-    
     public static Loader instance()
     {
         if (instance == null)
@@ -242,18 +240,18 @@
 
     /**
      * The primary loading code
-     * 
-     * This is visited during first initialization by Minecraft to scan and load the mods 
+     *
+     * This is visited during first initialization by Minecraft to scan and load the mods
      * from all sources
      * 1. The minecraft jar itself (for loading of in jar mods- I would like to remove this if possible but forge depends on it at present)
      * 2. The mods directory with expanded subdirs, searching for mods named mod_*.class
      * 3. The mods directory for zip and jar files, searching for mod classes named mod_*.class again
-     * 
+     *
      * The found resources are first loaded into the {@link #modClassLoader} (always) then scanned for class resources matching the specification above.
-     * 
+     *
      * If they provide the {@link Mod} annotation, they will be loaded as "FML mods", which currently is effectively a NO-OP.
      * If they are determined to be {@link net.minecraft.src.BaseMod} subclasses they are loaded as such.
-     * 
+     *
      * Finally, if they are successfully loaded as classes, they are then added to the available mod list.
      */
     private void load()
@@ -327,23 +325,31 @@
         state = State.LOADING;
         modClassLoader = new ModClassLoader();
         log.fine("Attempting to load mods contained in the minecraft jar file and associated classes");
-        File[] minecraftSources=modClassLoader.getParentSources();
-        if (minecraftSources.length==1 && minecraftSources[0].isFile()) {
-            log.fine(String.format("Minecraft is a file at %s, loading",minecraftSources[0].getAbsolutePath()));
+        File[] minecraftSources = modClassLoader.getParentSources();
+
+        if (minecraftSources.length == 1 && minecraftSources[0].isFile())
+        {
+            log.fine(String.format("Minecraft is a file at %s, loading", minecraftSources[0].getAbsolutePath()));
             attemptFileLoad(minecraftSources[0]);
-        } else {
-            for (int i=0; i<minecraftSources.length; i++) {
-                if (minecraftSources[i].isFile()) {
-                    log.fine(String.format("Found a minecraft related file at %s, loading",minecraftSources[i].getAbsolutePath()));
+        }
+        else
+        {
+            for (int i = 0; i < minecraftSources.length; i++)
+            {
+                if (minecraftSources[i].isFile())
+                {
+                    log.fine(String.format("Found a minecraft related file at %s, loading", minecraftSources[i].getAbsolutePath()));
                     attemptFileLoad(minecraftSources[i]);
-                } else if (minecraftSources[i].isDirectory()) {
-                    log.fine(String.format("Found a minecraft related directory at %s, loading",minecraftSources[i].getAbsolutePath()));
-                    attemptDirLoad(minecraftSources[i],"");
+                }
+                else if (minecraftSources[i].isDirectory())
+                {
+                    log.fine(String.format("Found a minecraft related directory at %s, loading", minecraftSources[i].getAbsolutePath()));
+                    attemptDirLoad(minecraftSources[i], "");
                 }
             }
         }
+
         log.fine("Minecraft jar mods loaded successfully");
-        
         log.info(String.format("Loading mods from %s", canonicalModsPath));
         File[] modList = modsDir.listFiles();
         // Sort the files into alphabetical order first
@@ -354,7 +360,7 @@
             if (modFile.isDirectory())
             {
                 log.fine(String.format("Found a directory %s, attempting to load it", modFile.getName()));
-                boolean modFound = attemptDirLoad(modFile,"");
+                boolean modFound = attemptDirLoad(modFile, "");
 
                 if (modFound)
                 {
@@ -397,9 +403,11 @@
 
     private boolean attemptDirLoad(File modDir, String path)
     {
-        if (path.length()==0) {
+        if (path.length() == 0)
+        {
             extendClassLoader(modDir);
         }
+
         boolean foundAModClass = false;
         File[] content = modDir.listFiles(new FileFilter()
         {
@@ -409,21 +417,26 @@
                 return (file.isFile() && modClass.matcher(file.getName()).find()) || file.isDirectory();
             }
         });
-
         // Always sort our content
         Arrays.sort(content);
+
         for (File file : content)
         {
-            if (file.isDirectory()) {
-                log.finest(String.format("Recursing into package %s", path+file.getName()));
-                foundAModClass|=attemptDirLoad(file,path+file.getName()+".");
+            if (file.isDirectory())
+            {
+                log.finest(String.format("Recursing into package %s", path + file.getName()));
+                foundAModClass |= attemptDirLoad(file, path + file.getName() + ".");
                 continue;
             }
+
             Matcher fname = modClass.matcher(file.getName());
-            if (!fname.find()) {
+
+            if (!fname.find())
+            {
                 continue;
             }
-            String clazzName=path+fname.group(2);
+
+            String clazzName = path + fname.group(2);
             log.fine(String.format("Found a mod class %s in directory %s, attempting to load it", clazzName, modDir.getName()));
             loadModClass(modDir, file.getName(), clazzName);
             log.fine(String.format("Successfully loaded mod class %s", file.getName()));
@@ -544,7 +557,7 @@
 
     /**
      * Query if we know of a mod named modname
-     * 
+     *
      * @param modname
      * @return
      */
