--- ../src_base/minecraft_server/cpw/mods/fml/server/FMLServerHandler.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src/minecraft_server/cpw/mods/fml/server/FMLServerHandler.java	0000-00-00 00:00:00.000000000 -0000
@@ -43,22 +43,22 @@
 
 /**
  * Handles primary communication from hooked code into the system
- * 
+ *
  * The FML entry point is {@link #onPreLoad(MinecraftServer)} called from
  * {@link MinecraftServer}
- * 
+ *
  * Obfuscated code should focus on this class and other members of the "server"
  * (or "client") code
- * 
+ *
  * The actual mod loading is handled at arms length by {@link Loader}
- * 
+ *
  * It is expected that a similar class will exist for each target environment:
  * Bukkit and Client side.
- * 
+ *
  * It should not be directly modified.
- * 
+ *
  * @author cpw
- * 
+ *
  */
 public class FMLServerHandler implements IFMLSidedHandler
 {
@@ -80,7 +80,7 @@
     /**
      * Called to start the whole game off from
      * {@link MinecraftServer#startServer}
-     * 
+     *
      * @param minecraftServer
      */
     public void onPreLoad(MinecraftServer minecraftServer)
@@ -113,6 +113,7 @@
         {
             // We're safe. continue
         }
+
         server = minecraftServer;
         FMLCommonHandler.instance().registerSidedDelegate(this);
         CommonRegistry.registerRegistry(new ServerRegistry());
@@ -145,7 +146,7 @@
 
     /**
      * Get the server instance
-     * 
+     *
      * @return
      */
     public MinecraftServer getServer()
@@ -163,10 +164,10 @@
 
     /**
      * Called from ChunkProviderServer when a chunk needs to be populated
-     * 
+     *
      * To avoid polluting the worldgen seed, we generate a new random from the
      * world seed and generate a seed from that
-     * 
+     *
      * @param chunkProvider
      * @param chunkX
      * @param chunkZ
@@ -191,7 +192,7 @@
 
     /**
      * Called from the furnace to lookup fuel values
-     * 
+     *
      * @param itemId
      * @param itemDamage
      * @return
@@ -223,13 +224,13 @@
     public ModContainer loadBaseModMod(Class<?> clazz, File canonicalFile)
     {
         @SuppressWarnings("unchecked")
-        Class<? extends BaseMod> bmClazz = (Class<? extends BaseMod>) clazz;
+        Class <? extends BaseMod > bmClazz = (Class <? extends BaseMod >) clazz;
         return new ModLoaderModContainer(bmClazz, canonicalFile);
     }
 
     /**
      * Called to notify that an item was picked up from the world
-     * 
+     *
      * @param entityItem
      * @param entityPlayer
      */
@@ -246,7 +247,7 @@
 
     /**
      * Raise an exception
-     * 
+     *
      * @param exception
      * @param message
      * @param stopGame
@@ -260,7 +261,7 @@
     /**
      * Attempt to dispense the item as an entity other than just as a the item
      * itself
-     * 
+     *
      * @param world
      * @param x
      * @param y
@@ -293,7 +294,7 @@
 
     /**
      * Build a list of default overworld biomes
-     * 
+     *
      * @return
      */
     public BiomeGenBase[] getDefaultOverworldBiomes()
@@ -321,7 +322,7 @@
 
     /**
      * Called when an item is crafted
-     * 
+     *
      * @param player
      * @param craftedItem
      * @param craftingGrid
@@ -339,7 +340,7 @@
 
     /**
      * Called when an item is smelted
-     * 
+     *
      * @param player
      * @param smeltedItem
      */
@@ -356,7 +357,7 @@
 
     /**
      * Called when a chat packet is received
-     * 
+     *
      * @param chat
      * @param player
      * @return true if you want the packet to stop processing and not echo to
@@ -377,7 +378,7 @@
 
     /**
      * Called when a packet 250 packet is received from the player
-     * 
+     *
      * @param packet
      * @param player
      */
@@ -399,7 +400,7 @@
 
     /**
      * Handle register requests for packet 250 channels
-     * 
+     *
      * @param packet
      */
     private void handleClientRegistration(Packet250CustomPayload packet, EntityPlayer player)
@@ -408,6 +409,7 @@
         {
             return;
         }
+
         try
         {
             for (String channel : new String(packet.data, "UTF8").split("\0"))
@@ -436,7 +438,7 @@
 
     /**
      * Handle a login
-     * 
+     *
      * @param loginPacket
      * @param networkManager
      */
@@ -446,6 +448,7 @@
         packet.channel = "REGISTER";
         packet.data = FMLCommonHandler.instance().getPacketRegistry();
         packet.length = packet.data.length;
+
         if (packet.length > 0)
         {
             networkManager.addToSendQueue(packet);
@@ -507,6 +510,7 @@
                 return true;
             }
         }
+
         return false;
     }
 
