package com.bioxx.tfc.WorldGen.GenLayers;

import java.util.Arrays;

import net.minecraft.world.gen.layer.IntCache;

public class GenLayerZoomTFC extends GenLayerTFC
{
	public GenLayerZoomTFC(long seed, GenLayerTFC par3GenLayer)
	{
		super(seed);
		super.parent = par3GenLayer;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	@Override
	public int[] getInts(int x, int z, int xSize, int zSize)
	{
		int xCoord = x >> 1;
		int zCoord = z >> 1;
		int newXSize = (xSize >> 1) + 2;
		int newZSize = (zSize >> 1) + 2;
		int[] parentCache = this.parent.getInts(xCoord, zCoord, newXSize, newZSize);
		int i2 = newXSize - 1 << 1;
		int j2 = newZSize - 1 << 1;
		int[] out = IntCache.getIntCache(i2 * j2);
		Arrays.fill(out, 0);
		int l2;

		for (int k2 = 0; k2 < newZSize - 1; ++k2)
		{
			l2 = (k2 << 1) * i2;
			int i3 = 0;
			int j3 = parentCache[i3 + 0 + (k2 + 0) * newXSize];

			for (int k3 = parentCache[i3 + 0 + (k2 + 1) * newXSize]; i3 < newXSize - 1; ++i3)
			{
				this.initChunkSeed(i3 + xCoord << 1, k2 + zCoord << 1);
				int l3 = parentCache[i3 + 1 + (k2 + 0) * newXSize];
				int i4 = parentCache[i3 + 1 + (k2 + 1) * newXSize];
				out[l2] = j3;
				out[l2++ + i2] = this.selectRandom(new int[] {j3, k3});
				out[l2] = this.selectRandom(new int[] {j3, l3});
				out[l2++ + i2] = this.selectModeOrRandom(j3, l3, k3, i4);
				j3 = l3;
				k3 = i4;
			}
		}

		int[] outCache = IntCache.getIntCache(xSize * zSize);

		for (l2 = 0; l2 < zSize; ++l2)
		{
			int srcPos = (l2 + (z & 1)) * i2 + (x & 1);
			System.arraycopy(out, srcPos, outCache, l2 * xSize, xSize);
		}

		return outCache;
	}

	/**
	 * Chooses one of the two inputs randomly.
	 */
	protected int choose(int par1, int par2)
	{
		return this.nextInt(2) == 0 ? par1 : par2;
	}

	protected int choose4(int id0, int id1, int id2, int id3)
	{
		if (id1 == id2 && id2 == id3)
			return id1;
		else if (id0 == id1 && id0 == id2)
			return id0;
		else if (id0 == id1 && id0 == id3)
			return id0;
		else if (id0 == id2 && id0 == id3)
			return id0;
		else if (id0 == id1 && id2 != id3)
			return id0;
		else if (id0 == id2 && id1 != id3)
			return id0;
		else if (id0 == id3 && id1 != id2)
			return id0;
		else if (id1 == id0 && id2 != id3)
			return id1;
		else if (id1 == id2 && id0 != id3)
			return id1;
		else if (id1 == id3 && id0 != id2)
			return id1;
		else if (id2 == id0 && id1 != id3)
			return id2;
		else if (id2 == id1 && id0 != id3)
			return id2;
		else if (id2 == id3 && id0 != id1)
			return id2;
		else if (id3 == id0 && id1 != id2)
			return id2;
		else if (id3 == id1 && id0 != id2)
			return id2;
		else if (id3 == id2 && id0 != id1)
			return id2;
		else
		{
			int rand = this.nextInt(4);
			return rand == 0 ? id0 : (rand == 1 ? id1 : (rand == 2 ? id2 : id3));
		}
	}

	public static GenLayerTFC magnify(long par0, GenLayerTFC par2GenLayer, int par3)
	{
		Object var4 = par2GenLayer;
		for (int var5 = 0; var5 < par3; ++var5)
			var4 = new GenLayerZoomTFC(par0 + var5, (GenLayerTFC) var4);
		return (GenLayerTFC) var4;
	}
}
